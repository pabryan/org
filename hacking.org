#+FILETAGS: HACKING

* Game Development
  :PROPERTIES:
  :ID:       faa642eb-8002-4af8-a098-2ab4e75b86f1
  :END:
PROPERTIES:
CATEGORY: Games
END:

** TODO kilobolt android game tutorial		      :ANDROID:GAMES:SOMEDAY:
   :PROPERTIES:
   :ID:       95c8b378-9880-4b0a-88ae-ef1789ef0cf5
   :END:
http://www.kilobolt.com/game-development-tutorial.html
[2012-10-22 Mon 18:07]
*** NEXT Find out where I'm up to and make next tasks for each week
    :PROPERTIES:
    :ID:       1299357f-6450-4633-8f67-5706b2334bf5
    :END:
** TODO java code geeks android game tutorial	      :ANDROID:GAMES:SOMEDAY:
[[http://www.javacodegeeks.com/2011/06/android-game-development-tutorials.html][tutorial]] 
  CLOCK: [2012-10-23 Tue 17:06]--[2012-10-23 Tue 17:06] =>  0:00
   :PROPERTIES:
   :ID:       6a9762f7-dd70-4f1f-a09b-eef4151fc4f8
   :END:
[2012-10-23 Tue 17:06]
*** NEXT Java code geeks Tutorial
    :PROPERTIES:
    :ID:       953d8f2c-22b2-40ad-bbde-e2eabc453c60
    :END: 

* Programming
  :PROPERTIES:
  :ID:       5353497c-9613-4623-a4ba-4ac6a37e42fe
  :END:
** Structure and Interpretation of Computer Programs 
http://mitpress.mit.edu/sicp/
http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/
* emacs
  :PROPERTIES:
  :ID:       0dcdccc8-50f8-487d-88c6-1034edc744ef
  :END:
PROPERTIES:
CATEGORY: emacs
END:

** SOMEDAY emdroid hacking
[[http://www.emacswiki.org/emacs/EmDroid][EmDroid]]
  CLOCK: [2012-10-21 Sun 17:23]--[2012-10-21 Sun 17:23] =>  0:00
   :PROPERTIES:
   :ID:       0f28a16d-86ca-4727-b2ca-dc631fe1273f
   :END:
[2012-10-21 Sun 17:23]
** SOMEDAY Implement emacs merge-news for hg
  CLOCK: [2012-10-31 Wed 09:40]--[2012-10-31 Wed 09:40] =>  0:00
   :PROPERTIES:
   :ID:       4fc56c2f-08d8-456b-a8da-66fcfe9d1ec4
   :END:
[2012-10-31 Wed 09:40]
* Projects
  :PROPERTIES:
  :ID:       eb55263d-43e9-4201-8e78-afb142fbc2e3
  :END:
** LinkIt
- This is like ifttt on steroids
- We have sources which are accessed via plugins. These pull in data and convert it into internal format.
- We have matching rules, which is also pluggable. 
  - Match on src (e.g. Google+)
  - Match on type of src (e.g. Google+ post, photo, etc.)
  - Match on tags
  - Match on dropbox new files
- Internal representation
  - Need some raw structure depending on plugin
  - Some common fields like URL, title, author.
  - Are some mandatory?
  - Need mime types like text/html, img/png, etc.
- Plugins should expose available fields
  - e.g. Feedly doesn't have tags, pocket does.

** Coding Ideas
*** Fluid Mechanics
- Port Anuga to Sage!
- Anuga1D.
  - test suites
  - docs
  - rejig the C to be simpler
*** WDM
  - Do this in sage!
*** Vector partitions
- VectorPartitions in Sage
*** Jekyll
**** Jekyll context based config
- Have _config.yml, _includes, _layout in sub-dirs
- Can I do some of this with Rakefiles?
**** Templating
- plugin to use templating language of choice rather than liquid
http://www.cheetahtemplate.org/
http://mustache.github.io/
- what about more general pre- and post-processing, hooks etc.
*** Reading lists/notes/web clipper
- Can I replace Evernote/Pocket with Google+?
- It's just tags.
- Can I "clip" a page with Google+
- Offline mode and having content appear in Evernote/Pocket is very nice!
*** org-mode
- insert boilerplate code on export.
- for instance I want to  add some html to the *body* on export but html-pre/postamble only insert into headers and footer

*** Selected papers
- facebook backend
** TODO Python window manager
  SCHEDULED: <2015-01-01 Thu>
  :LOGBOOK:
  CLOCK: [2014-04-08 Tue 13:44]--[2014-04-08 Tue 13:59] =>  0:15
  :END:
[2014-04-08 Tue 13:44]
- manages not just windows but data and sharing data
- e.g: web browser shows an image. 
  - Drag it to the email program and it creates an email with that image as an attachment. 
  - Drag it to word processor and it creates a document with the image embedded.
  - Drag it to a folder in the file manager and it saves the image in a file there (need to have a file name (without extension!), and the file type from which the extension is derived. possibly we prompt the user to edit the file name and extension if desired
  - browse (file) manager can display anything "browseable", e.g. a local directory, a remote directory, a web page! (it just shows the (html, php, anything unspecified) links as subfolders) and the images, pdf's etc. as files. So we'd need to have some way of identifying a resource as browseable or not and for the unbrowseable resources we treat like a data source and the browseables as something to browse for data sources. We could switch views from say view web page to browse web page.
  - Drag it to the shell and we can access the object as a file or through a pipe, a temp. file a fifo etc.
  - left drag is default operation (e.g. copy here in the file manager)
  - right drag gives a list of choices (e.g. copy here, symlink here in file manager)
  - make a copy/paste (data sources?) buffer browser. Anytime a resource is dragged from one app to another, it's added to the buffer which may be accessed in several different ways such as a queue (push/pop) or a random access list that can be searched etc. The user can specify different views of this buffer, and automatic filters that add/remove items from certain views. For instance, their could be an images view that only shows image sources. There could be a view for a specific project, where resources are dragged into the view. Possibly we can save/load views and also write code that automatically populates the view, e.g. with everything on a web page though this would be better accessed through the browse (file) manager.
  - So applications can render content e.g. display a web page, or return a browseable version (which is shown in the default browser). So emacs for instance doesn't need to be changed much. We want to view a web page as browseable in emacs, all we need is an interface from how emacs browses folders to the new browse api and anything emacs does is via the api, which then passes it on to the application e.g. the web page application which returns (via the api) whatever is requested.

* Hardware
  :PROPERTIES:
  :ID:       d0eec980-33e9-47d0-87be-70348f2339ff
  :END:
** Raspberry Pi
*** Notes
*** Tasks
**** DONE Get Raspberry Pi
     SCHEDULED: <2013-09-01 Sun>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2013-09-02 Mon 10:46]
     :END:
     :PROPERTIES:
     :ID:       e9814504-7032-4034-a786-e3047c113828
     :END:
